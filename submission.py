import random
import pisqpipe as pp
from pisqpipe import DEBUG_EVAL, DEBUG

pp.infotext = 'name="pbrain-pyrandom", author="Jan Stransky", version="1.0", country="Czech Republic", www="https://github.com/stranskyjan/pbrain-pyrandom"'

MAX_BOARD = 100
board = [[0 for i in range(MAX_BOARD)] for j in range(MAX_BOARD)]


def brain_init():
	if pp.width < 5 or pp.height < 5:
		pp.pipeOut("ERROR size of the board")
		return
	if pp.width > MAX_BOARD or pp.height > MAX_BOARD:
		pp.pipeOut("ERROR Maximal board size is {}".format(MAX_BOARD))
		return
	pp.pipeOut("OK")

def brain_restart():
	for x in range(pp.width):
		for y in range(pp.height):
			board[x][y] = 0
	pp.pipeOut("OK")

def isFree(x, y):
	return x >= 0 and y >= 0 and x < pp.width and y < pp.height and board[x][y] == 0

def brain_my(x, y):
	if isFree(x,y):
		board[x][y] = 1
	else:
		pp.pipeOut("ERROR my move [{},{}]".format(x, y))

def brain_opponents(x, y):
	if isFree(x,y):
		board[x][y] = 2
	else:
		pp.pipeOut("ERROR opponents's move [{},{}]".format(x, y))

def brain_block(x, y):
	if isFree(x,y):
		board[x][y] = 3
	else:
		pp.pipeOut("ERROR winning move [{},{}]".format(x, y))

def brain_takeback(x, y):
	if x >= 0 and y >= 0 and x < pp.width and y < pp.height and board[x][y] != 0:
		board[x][y] = 0
		return 0
	return 2

def brain_end():
	pass

def brain_about():
	pp.pipeOut(pp.infotext)

if DEBUG_EVAL:
	import win32gui
	def brain_eval(x, y):
		# TODO check if it works as expected
		wnd = win32gui.GetForegroundWindow()
		dc = win32gui.GetDC(wnd)
		rc = win32gui.GetClientRect(wnd)
		c = str(board[x][y])
		win32gui.ExtTextOut(dc, rc[2]-15, 3, 0, None, c, ())
		win32gui.ReleaseDC(wnd, dc)

#######################******Our Methods******################################

############################******Midterm******###############################

from collections import defaultdict
import copy

# 用来查找可供放置的位置；方向依次为上、下、左、右、左上、左下、右上、右下
direction = [(0,1),(0,-1),(-1,0),(1,0),(-1,1),(-1,-1),(1,1),(1,-1)]

# 该表用来对某一位置（没有棋子）的价值的评估，价值越高说明越应该下在这里
# 用0和1表示我方棋子和空格，1: 我方棋子； 0： 空白，
# 棋子的价值分为0/50/500/2300/10000 这五个等级
condition_val = {'1#1': 0,'#11': 0,'111#': 0, '0001#': 0, '0010#0100': 0, '0010#0101': 0, '0010#0011': 0, '0010#0010': 0, '0010#0000': 0, '0010#0001': 0, '0010#011': 0, '0010#010': 0, '0010#000': 0, '0010#001': 0, '0010#01': 0, '0010#00': 0, '0010#1': 0, '0010#0': 0, '0010#': 0, '1010#0001': 0, '1010#01': 0, '1010#00': 0, '1010#1': 0, '1010#0': 0, '1010#': 0, '1100#0011': 0, '1100#0010': 0, '1100#0000': 0, '1100#0001': 0, '1100#101': 0, '1100#010': 0, '1100#000': 0, '1100#001': 0, '1100#01': 0, '1100#00': 0, '1100#1': 0, '1100#0': 0, '1100#': 0, '0100#0010': 0, '0100#0000': 0, '0100#0001': 0, '0100#010': 0, '0100#000': 0, '0100#001': 0, '0100#01': 0, '0100#00': 0, '0100#0': 0, '0100#': 0, '0000#0000': 0, '0000#0001': 0, '0000#010': 0, '0000#000': 0, '0000#001': 0, '0000#01': 0, '0000#00': 0, '0000#1': 0, '0000#0': 0, '0000#': 0, '1000#0001': 0, '1000#011': 0, '1000#010': 0, '1000#000': 0, '1000#001': 0, '1000#01': 0, '1000#00': 0, '1000#1': 0, '1000#0': 0, '1000#': 0, '110#': 0, '101#': 0, '011#': 0, '001#': 0, '010#010': 0, '010#000': 0, '010#001': 0, '010#00': 0, '010#1': 0, '010#0': 0, '010#': 0, '000#000': 0, '000#001': 0, '000#01': 0, '000#00': 0, '000#1': 0, '000#0': 0, '000#': 0, '100#001': 0, '100#01': 0, '100#00': 0, '100#1': 0, '100#0': 0, '100#': 0,
				 '11#1': 0, '11#0': 0, '11#': 0, '10#01': 0, '10#10': 0, '10#00': 0, '10#1': 0, '10#0': 0, '10#': 0, '01#1': 0, '01#0': 0, '01#': 0, '00#00': 0, '00#1': 0, '00#0': 0, '00#': 0, '1#0': 0, '1#': 0, '0#0': 0, '0#': 0, '#': 0, '#111': 0, '#1000': 0, '1010#0100': 0, '1100#0100': 0, '0100#0100': 0, '0000#0100': 0, '1000#0100': 0, '110#0100': 0, '010#0100': 0, '000#0100': 0, '100#0100': 0, '10#0100': 0, '00#0100': 0, '1#0100': 0, '0#0100': 0, '#0100': 0, '1000#0101': 0, '10#0101': 0, '00#0101': 0, '1#0101': 0, '0#0101': 0, '#0101': 0, '0100#0011': 0, '0000#0011': 0, '1000#0011': 0, '101#0011': 0, '010#0011': 0, '000#0011': 0, '100#0011': 0, '10#0011': 0, '00#0011': 0, '1#0011': 0, '0#0011': 0, '#0011': 0, '0000#0010': 0, '1000#0010': 0, '010#0010': 0, '000#0010': 0, '100#0010': 0, '10#0010': 0, '00#0010': 0, '0#0010': 0, '#0010': 0, '1000#0000': 0, '010#0000': 0, '000#0000': 0, '100#0000': 0, '10#0000': 0, '00#0000': 0, '1#0000': 0, '0#0000': 0, '#0000': 0, '110#0001': 0, '010#0001': 0, '000#0001': 0, '100#0001': 0, '10#0001': 0, '00#0001': 0, '1#0001': 0, '0#0001': 0, '#0001': 0, '#011': 0, '#101': 0, '#110': 0, '#100': 0, '000#010': 0, '100#010': 0, '00#010': 0, '1#010': 0, '0#010': 0, '#010': 0, '100#000': 0, '10#000': 0, '00#000': 0,
				 '1#000': 0, '0#000': 0, '#000': 0, '10#001': 0, '00#001': 0, '1#001': 0, '0#001': 0, '#001': 0, '1#11': 0, '0#11': 0, '01#01': 0, '00#01': 0, '1#01': 0, '0#01': 0, '#01': 0, '1#10': 0, '0#10': 0, '#10': 0, '1#00': 0, '0#00': 0, '#00': 0, '0#1': 0, '#1': 0, '#0': 0, '0110#': 50, '0101#': 50, '0011#': 50, '0001#0011': 50, '0001#0010': 50, '0001#0000': 50, '0001#0001': 50, '0001#000': 50, '0001#001': 50, '0001#01': 50, '0001#00': 50, '0001#1': 50, '0001#0': 50, '1001#0011': 50, '1001#0010': 50, '1001#0000': 50, '1001#0001': 50, '1001#000': 50, '1001#001': 50, '1001#01': 50, '1001#00': 50, '1001#1': 50, '1001#0': 50, '1001#': 50, '1010#0101': 50, '1010#0011': 50, '1010#0010': 50, '1010#0000': 50, '1010#011': 50, '1010#010': 50, '1010#000': 50, '1010#001': 50, '1100#011': 50, '1100#100': 50, '1100#11': 50, '1100#10': 50, '0100#011': 50, '0100#101': 50, '0100#100': 50, '0100#11': 50, '0100#10': 50, '0100#1': 50, '0000#011': 50, '0000#101': 50, '0000#100': 50, '0000#11': 50, '0000#10': 50, '1000#101': 50, '1000#100': 50, '1000#11': 50, '1000#10': 50, '110#011': 50, '110#010': 50, '110#000': 50, '110#001': 50, '110#01': 50, '110#00': 50, '110#0': 50, '101#000': 50, '101#001': 50, '101#01': 50, '101#00': 50, '101#0': 50, '011#0': 50, '001#000': 50,
				 '001#001': 50, '001#01': 50, '001#00': 50, '001#1': 50, '001#0': 50, '010#01': 50, '010#10': 50, '000#11': 50, '000#10': 50, '100#11': 50, '100#10': 50, '11#00': 50, '01#10': 50, '01#00': 50, '#0110': 50, '#1010': 50, '#1100': 50, '1100#1000': 50, '0100#1000': 50, '0000#1000': 50, '1000#1000': 50, '000#1000': 50, '100#1000': 50, '10#1000': 50, '00#1000': 50, '1#1000': 50, '0#1000': 50, '1100#1001': 50, '0100#1001': 50, '0000#1001': 50, '1000#1001': 50, '000#1001': 50, '100#1001': 50, '10#1001': 50, '00#1001': 50, '1#1001': 50, '0#1001': 50, '#1001': 50, '1100#0101': 50, '0100#0101': 50, '0000#0101': 50, '110#0101': 50, '010#0101': 50, '000#0101': 50, '100#0101': 50, '110#0011': 50, '001#0011': 50, '11#0011': 50, '01#0011': 50, '110#0010': 50, '101#0010': 50, '001#0010': 50, '11#0010': 50, '01#0010': 50, '1#0010': 50, '110#0000': 50, '101#0000': 50, '001#0000': 50, '11#0000': 50, '01#0000': 50, '101#0001': 50, '001#0001': 50, '11#0001': 50, '01#0001': 50, '010#011': 50, '000#011': 50, '100#011': 50, '10#011': 50, '00#011': 50, '0#011': 50, '000#101': 50, '100#101': 50, '10#101': 50, '00#101': 50, '0#101': 50, '0#110': 50, '000#100': 50, '100#100': 50, '10#100': 50, '00#100': 50, '1#100': 50, '0#100': 50, '10#010': 50, '01#010': 50, '11#000': 50,
				 '01#000': 50, '11#001': 50, '01#001': 50, '00#11': 50, '00#10': 50, '0111#': 500, '0110#0110': 500, '0110#1010': 500, '0110#1100': 500, '0110#1000': 500, '0110#1001': 500, '0110#0111': 500, '0110#0100': 500, '0110#0101': 500, '0110#0011': 500, '0110#0010': 500, '0110#0000': 500, '0110#0001': 500, '0110#111': 500, '0110#011': 500, '0110#101': 500, '0110#110': 500, '0110#100': 500, '0110#010': 500, '0110#000': 500, '0110#001': 500, '0110#11': 500, '0110#01': 500, '0110#10': 500, '0110#00': 500, '0110#1': 500, '0110#0': 500, '0101#1000': 500, '0101#1001': 500, '0101#0111': 500, '0101#0100': 500, '0101#0101': 500, '0101#0011': 500, '0101#0010': 500, '0101#0000': 500, '0101#0001': 500, '0101#011': 500, '0101#100': 500, '0101#010': 500, '0101#000': 500, '0101#001': 500, '0101#11': 500, '0101#01': 500, '0101#10': 500, '0101#00': 500, '0101#1': 500, '0101#0': 500, '0011#0111': 500, '0011#0100': 500, '0011#0101': 500, '0011#0011': 500, '0011#0010': 500, '0011#0000': 500, '0011#0001': 500, '0011#011': 500, '0011#010': 500, '0011#000': 500, '0011#001': 500, '0011#01': 500, '0011#00': 500, '0011#1': 500, '0011#0': 500, '1011#0011': 500, '1011#0010': 500, '1011#0000': 500, '1011#0001': 500, '1011#000': 500, '1011#001': 500, '1011#00': 500, '1011#1': 500,
				 '1011#0': 500, '1011#': 500, '0001#1000': 500, '0001#1001': 500, '0001#0111': 500, '0001#1011': 500, '0001#0100': 500, '0001#0101': 500, '0001#011': 500, '0001#101': 500, '0001#100': 500, '0001#010': 500, '0001#11': 500, '0001#10': 500, '1001#1001': 500, '1001#0111': 500, '1001#1011': 500, '1001#0100': 500, '1001#0101': 500, '1001#011': 500, '1001#101': 500, '1001#100': 500, '1001#010': 500, '1001#11': 500, '1001#10': 500, '1110#0100': 500, '1110#0101': 500, '1110#0011': 500, '1110#0010': 500, '1110#0000': 500, '1110#0001': 500, '1110#111': 500, '1110#011': 500, '1110#101': 500, '1110#110': 500, '1110#100': 500, '1110#010': 500, '1110#000': 500, '1110#001': 500, '1110#11': 500, '1110#01': 500, '1110#10': 500, '1110#00': 500, '1110#1': 500, '1110#0': 500, '1110#': 500, '1101#0100': 500, '1101#0101': 500, '1101#0011': 500, '1101#0010': 500, '1101#0000': 500, '1101#0001': 500, '1101#100': 500, '1101#010': 500, '1101#000': 500, '1101#001': 500, '1101#11': 500, '1101#01': 500, '1101#10': 500, '1101#00': 500, '1101#1': 500, '1101#0': 500, '1101#': 500, '0010#111': 500, '0010#101': 500, '0010#110': 500, '0010#100': 500, '0010#11': 500, '0010#10': 500, '1010#111': 500, '1010#101': 500, '1010#110': 500, '1010#100': 500, '1010#11': 500, '1010#10': 500, '1100#111': 500,
				 '1100#110': 500, '0100#111': 500, '0100#110': 500, '0000#111': 500, '0000#110': 500, '1000#111': 500, '1000#110': 500, '111#011': 500, '111#010': 500, '111#000': 500, '111#001': 500, '111#01': 500, '111#00': 500, '111#0': 500, '110#101': 500, '110#110': 500, '110#100': 500, '110#11': 500, '110#10': 500, '110#1': 500, '101#101': 500, '101#100': 500, '101#010': 500, '101#11': 500, '101#10': 500, '101#1': 500, '011#010': 500, '011#000': 500, '011#001': 500, '011#01': 500, '011#00': 500, '011#1': 500, '001#100': 500, '001#010': 500, '001#11': 500, '001#10': 500, '010#11': 500, '11#01': 500, '11#10': 500, '#1110': 500, '0101#0110': 500, '0011#0110': 500, '0001#0110': 500, '1001#0110': 500, '1110#0110': 500, '0010#0110': 500, '1010#0110': 500, '1100#0110': 500, '0100#0110': 500, '0000#0110': 500, '1000#0110': 500, '111#0110': 500, '110#0110': 500, '101#0110': 500, '011#0110': 500, '001#0110': 500, '010#0110': 500, '000#0110': 500, '100#0110': 500, '11#0110': 500, '10#0110': 500, '01#0110': 500, '00#0110': 500, '1#0110': 500, '0#0110': 500, '0001#1010': 500, '1001#1010': 500, '1110#1010': 500, '0010#1010': 500, '1010#1010': 500, '1100#1010': 500, '0100#1010': 500, '0000#1010': 500, '1000#1010': 500, '110#1010': 500, '001#1010': 500, '010#1010': 500, '000#1010': 500,
				 '100#1010': 500, '11#1010': 500, '10#1010': 500, '01#1010': 500, '00#1010': 500, '1#1010': 500, '0#1010': 500, '1110#1100': 500, '0010#1100': 500, '1010#1100': 500, '1100#1100': 500, '0100#1100': 500, '0000#1100': 500, '1000#1100': 500, '110#1100': 500, '010#1100': 500, '000#1100': 500, '100#1100': 500, '10#1100': 500, '00#1100': 500, '1#1100': 500, '0#1100': 500, '1100#1101': 500, '0100#1101': 500, '0000#1101': 500, '1000#1101': 500, '000#1101': 500, '100#1101': 500, '00#1101': 500, '1#1101': 500, '0#1101': 500, '#1101': 500, '1001#1000': 500, '1110#1000': 500, '1101#1000': 500, '0010#1000': 500, '1010#1000': 500, '110#1000': 500, '101#1000': 500, '001#1000': 500, '010#1000': 500, '11#1000': 500, '01#1000': 500, '1110#1001': 500, '1101#1001': 500, '0010#1001': 500, '1010#1001': 500, '110#1001': 500, '101#1001': 500, '001#1001': 500, '010#1001': 500, '11#1001': 500, '01#1001': 500, '0010#0111': 500, '1010#0111': 500, '1100#0111': 500, '0100#0111': 500, '0000#0111': 500, '1000#0111': 500, '111#0111': 500, '110#0111': 500, '101#0111': 500, '011#0111': 500, '001#0111': 500, '010#0111': 500, '000#0111': 500, '100#0111': 500, '11#0111': 500, '10#0111': 500, '01#0111': 500, '00#0111': 500, '1#0111': 500, '0#0111': 500, '#0111': 500, '0010#1011': 500, '1010#1011': 500, '1100#1011': 500,
				 '0100#1011': 500, '0000#1011': 500, '1000#1011': 500, '001#1011': 500, '010#1011': 500, '000#1011': 500, '100#1011': 500, '11#1011': 500, '10#1011': 500, '01#1011': 500, '00#1011': 500, '1#1011': 500, '0#1011': 500, '#1011': 500, '111#0100': 500, '101#0100': 500, '011#0100': 500, '001#0100': 500, '11#0100': 500, '01#0100': 500, '111#0101': 500, '101#0101': 500, '011#0101': 500, '001#0101': 500, '11#0101': 500, '01#0101': 500, '111#0011': 500, '011#0011': 500, '111#0010': 500, '011#0010': 500, '111#0000': 500, '011#0000': 500, '111#0001': 500, '011#0001': 500, '110#111': 500, '010#111': 500, '000#111': 500, '100#111': 500, '10#111': 500, '00#111': 500, '0#111': 500, '101#011': 500, '011#011': 500, '001#011': 500, '11#011': 500, '01#011': 500, '1#011': 500, '001#101': 500, '010#101': 500, '11#101': 500, '01#101': 500, '1#101': 500, '010#110': 500, '000#110': 500, '100#110': 500, '10#110': 500, '00#110': 500, '1#110': 500, '010#100': 500, '11#100': 500, '01#100': 500, '11#010': 500, '10#11': 500, '01#11': 500, '0111#0110': 2300, '0111#0111':2300, '0111#0100': 2300, '0111#0101': 2300, '0111#0011': 2300, '0111#0010': 2300, '0111#0000': 2300, '0111#0001': 2300, '0111#011': 2300, '0111#010': 2300, '0111#000': 2300, '0111#001': 2300, '0111#01': 2300, '0111#00': 2300, '0111#0': 2300, '0110#1101': 2300,
				 '0110#1011': 2300, '0101#1010': 2300, '0101#1100': 2300, '0101#1101': 2300, '0101#1011': 2300, '0101#101': 2300, '0101#110': 2300, '0011#1000': 2300, '0011#1001': 2300, '0011#1011': 2300, '0011#101': 2300, '0011#100': 2300, '0011#10': 2300, '1011#1000': 2300, '1011#1001': 2300, '1011#0111': 2300, '1011#1011': 2300, '1011#0100': 2300, '1011#0101': 2300, '1011#011': 2300, '1011#101': 2300, '1011#100': 2300, '1011#010': 2300, '1011#01': 2300, '1011#10': 2300, '0001#110': 2300, '1001#110': 2300, '1110#0111': 2300, '1110#1011':2300, '1101#1011': 2300, '1101#011': 2300, '1101#101': 2300, '1101#110': 2300, '101#110': 2300, '011#100': 2300, '011#10': 2300, '0110#1110':2300, '1110#1110': 2300, '0010#1110': 2300, '1010#1110': 2300, '1100#1110': 2300, '0100#1110': 2300, '0000#1110': 2300, '1000#1110': 2300, '110#1110': 2300, '010#1110': 2300, '000#1110': 2300, '100#1110': 2300, '10#1110': 2300, '00#1110': 2300, '0#1110': 2300, '1011#0110': 2300, '1101#0110': 2300, '0011#1010': 2300, '1011#1010': 2300, '1101#1010': 2300, '101#1010': 2300, '011#1010': 2300, '0001#1100': 2300, '1001#1100': 2300, '1101#1100': 2300, '101#1100': 2300, '001#1100': 2300, '01#1100': 2300, '0001#1101': 2300, '1001#1101': 2300, '1110#1101': 2300, '1101#1101': 2300, '0010#1101': 2300, '1010#1101': 2300, '110#1101': 2300, '101#1101': 2300,
				 '001#1101': 2300, '010#1101': 2300, '10#1101': 2300, '01#1101': 2300, '011#1000': 2300, '011#1001': 2300, '1101#0111': 2300, '110#1011': 2300, '101#1011': 2300, '011#1011': 2300, '011#101': 2300, '001#110': 2300, '01#110': 2300, '0#1111': 10000, '10#1111': 10000, '1111#1111': 10000, '1111#1110': 10000, '1111#0110': 10000, '1111#1010': 10000, '1111#1100': 10000, '1111#1101': 10000, '1111#1000': 10000, '1111#1001': 10000, '1111#0111': 10000, '1111#1011': 10000, '1111#0100': 10000, '1111#0101': 10000, '1111#0011': 10000, '1111#0010': 10000, '1111#0000': 10000, '1111#0001': 10000, '1111#111': 10000, '1111#011': 10000, '1111#101': 10000, '1111#110': 10000, '1111#100': 10000, '1111#010': 10000, '1111#000': 10000, '1111#001': 10000, '1111#11': 10000, '1111#01': 10000, '1111#10': 10000, '1111#00': 10000, '1111#1': 10000, '1111#0': 10000, '1111#': 10000, '0111#1110': 10000, '0111#1010': 10000, '0111#1100': 10000, '0111#1101': 10000, '0111#1000': 10000, '0111#1001': 10000, '0111#1011': 10000, '0111#111': 10000, '0111#101': 10000, '0111#110': 10000, '0111#100': 10000, '0111#11': 10000, '0111#10': 10000, '0111#1': 10000, '0101#111': 10000, '0011#1100': 10000, '0011#1101': 10000, '0011#111': 10000, '0011#110': 10000, '0011#11': 10000, '1011#1101': 10000, '1011#111': 10000, '1011#110': 10000, '1011#11': 10000, '0001#111': 10000,
				 '1001#111': 10000, '1101#111': 10000, '111#111': 10000, '111#101': 10000, '111#110': 10000, '111#100': 10000, '111#11': 10000, '111#10': 10000, '111#1': 10000, '011#110': 10000, '011#11': 10000, '11#11': 10000, '0111#1111': 10000, '0110#1111': 10000, '0101#1111': 10000, '0011#1111': 10000, '1011#1111': 10000, '0001#1111': 10000, '1001#1111': 10000, '1110#1111': 10000, '1101#1111': 10000, '0010#1111': 10000, '1010#1111': 10000, '1100#1111': 10000, '0100#1111': 10000, '0000#1111': 10000, '1000#1111': 10000, '111#1111': 10000, '110#1111': 10000, '101#1111': 10000, '011#1111': 10000, '001#1111': 10000, '010#1111': 10000, '000#1111': 10000, '100#1111': 10000, '11#1111': 10000, '01#1111': 10000, '00#1111': 10000, '1#1111': 10000, '#1111': 10000, '0101#1110': 10000, '0011#1110': 10000, '1011#1110': 10000, '0001#1110': 10000, '1001#1110': 10000, '1101#1110': 10000, '111#1110': 10000, '101#1110': 10000, '011#1110': 10000, '001#1110': 10000, '11#1110': 10000, '01#1110': 10000, '1#1110': 10000, '111#1010': 10000, '1011#1100': 10000, '111#1100': 10000, '011#1100': 10000, '11#1100': 10000, '111#1101': 10000, '011#1101': 10000, '11#1101': 10000, '111#1000': 10000, '111#1001': 10000, '111#1011': 10000, '101#111': 10000, '011#111': 10000, '001#111': 10000, '11#111': 10000, '01#111': 10000, '1#111': 10000, '11#110': 10000}

# 查找棋子可下的位置
def find_posiable_place():
	place_to_take = []
	for x in range(pp.width):
		for y in range(pp.height):
			if board[x][y] != 0:
				for first,second in direction:
					if x+first >= 0 and x+first <= pp.width-1 and y+second >= 0 and y+second <= pp.height-1:
						if board[x+first][y+second] == 0:
							place_to_take.append((x+first,y+second))
	place_to_take = list(set(place_to_take))
	if not len(place_to_take):
		place_to_take.append((int(pp.width/2),int(pp.height/2)))
	return place_to_take

# 判断是我方还是敌方占优势: True 为优势，优势就选择进攻，否则防守
def condition_judge():
	our_condition = defaultdict(lambda: 0)
	oppo_condition = defaultdict(lambda: 0)
	all_place = find_posiable_place()
	for x,y in all_place:
		this_our_con = get_direc_con(x,y,1)
		if max([condition_val[this_our_con[con]] for con in this_our_con]) >= 2300:
			our_best_direc = max([condition_val[this_our_con[con]] for con in this_our_con])*4
		else:
			our_best_direc = sum([condition_val[this_our_con[con]] for con in this_our_con])
		this_oppo_con = get_direc_con(x,y,2)
		oppo_best_direc = sum([condition_val[this_oppo_con[con]] for con in this_oppo_con])
		our_condition[(x,y)] = our_best_direc
		oppo_condition[(x,y)] = oppo_best_direc

	if our_condition[max(our_condition,key=our_condition.get)] >= oppo_condition[max(oppo_condition,key=oppo_condition.get)]:
		return True
	else:
		return False

### get_direc_con_left,get_direc_con_right和get_direc_con函数用于获取某一位置的周围的棋子信息
# 该函数默认 x,y 处没有棋子，有的话当做没有处理
def get_direc_con_left(x,y,judge):
	# judge 用来判断是 我方还是敌方 ,1为我方，2为敌方
	#[横, 竖, 左斜, 右斜]
	four_con = {"heng":"","shu":"","zuo_xie":"","you_xie":""}

	all_place = [0,-1,-2,-3,-4]
	heng = [];shu = [];zuo_xie = [];you_xie = []
	for i in all_place:
		if x+i >= 0 and x+i <= pp.width-1:
			heng.append((x+i,y))
			if y+i >= 0 and y+i <= pp.height-1:
				zuo_xie.append((x+i,y+i))
		if y+i >= 0 and y+i <= pp.height-1:
			shu.append((x,y+i))
			if x-i >= 0 and x-i <= pp.width-1:
				you_xie.append((x-i,y+i))
	all_con = {"heng":heng,"shu":shu,"zuo_xie":zuo_xie,"you_xie":you_xie}

	for each_direc in all_con:
		for each_x,each_y in all_con[each_direc]:
			if each_x == x and each_y == y:
				four_con[each_direc] += "#"
			else:
				if board[each_x][each_y] == judge:
					four_con[each_direc] = "1" + four_con[each_direc]
				elif board[each_x][each_y] == 0:
					four_con[each_direc] = "0" + four_con[each_direc]
				else:
					break
		four_con[each_direc] = four_con[each_direc].strip()
	return four_con

def get_direc_con_right(x,y,judge):
	# judge 用来判断是 我方还是敌方 ,1为我方，2为敌方
	#[横, 竖, 左斜, 右斜]
	four_con = {"heng":"","shu":"","zuo_xie":"","you_xie":""}

	all_place = [1,2,3,4]
	heng = [];shu = [];zuo_xie = [];you_xie = []
	for i in all_place:
		if x+i >= 0 and x+i <= pp.width-1:
			heng.append((x+i,y))
			if y+i >= 0 and y+i <= pp.height-1:
				zuo_xie.append((x+i,y+i))
		if y+i >= 0 and y+i <= pp.height-1:
			shu.append((x,y+i))
			if x-i >= 0 and x-i <= pp.width-1:
				you_xie.append((x-i,y+i))
	all_con = {"heng":heng,"shu":shu,"zuo_xie":zuo_xie,"you_xie":you_xie}

	for each_direc in all_con:
		for each_x,each_y in all_con[each_direc]:
			if board[each_x][each_y] == judge:
				four_con[each_direc] += "1"
			elif board[each_x][each_y] == 0:
				four_con[each_direc] += "0"
			else:
				break
		four_con[each_direc] = four_con[each_direc].strip()
	return four_con

def get_direc_con(x,y,judge):
	left = get_direc_con_left(x,y,judge)
	right = get_direc_con_right(x,y,judge)
	four_con = {"heng": "", "shu": "", "zuo_xie": "", "you_xie": ""}
	for each_con in left:
		four_con[each_con] = left[each_con] + right[each_con]
	return four_con


# 该函数直接返回想要下棋子的位置的效用值
def judge_value(x,y,judge):
	four_con = get_direc_con(x,y,judge)
	return sum([condition_val[four_con[con]] for con in four_con])



#####################******Main part: Alpha-Beta pruning******#####################

# 优势时调用 max 函数，即返回使自己效用值最大的位置，否则调用 min 函数，返回是对方效用值最小的位置
def get_best_value():
	condition = condition_judge()
	if condition:
		return alpha_max(find_posiable_place(),float('-inf'),float('inf'),1,1,3)[0]
	else:
		return alpha_min(find_posiable_place(),float('-inf'),float('inf'),1,1,4)[0]

# 返回类似 ((x,y),value) 的一个元组，而只有到 get_best_value ，即最顶层时，我们才需要 action
def alpha_max(posiable_place,alpha,beta,piles,judge,set_piles):
	# 用于调用 min 函数时使用
	if not piles%2:
		values = {}
		for x, y in posiable_place:
			each_value = judge_value(x, y, 2)
			values[(x, y)] = each_value
		return (max(values, key=values.get), values[max(values, key=values.get)])
	if piles >= set_piles:
		values = {}
		for x,y in posiable_place:
			each_value = judge_value(x,y,1)
			values[(x,y)] = each_value
		return (max(values,key=values.get),values[max(values,key=values.get)])
	piles += 1
	v = float('-inf')
	v_x = v_y = 0
	### 首先看是否有位置效用值大于或等于10000
	posiable_place_copy = defaultdict(lambda :0)
	for x,y in posiable_place:
		posiable_place_copy[(x,y)] = judge_value(x,y,judge)
	for x,y in sorted(posiable_place_copy,key=posiable_place_copy.__getitem__,reverse=True):
		if posiable_place_copy[(x,y)] >= 10000:
			return ((x,y),posiable_place_copy[(x,y)])
		board[x][y] = judge  # 模拟下棋时，要修改棋盘
		new_posiable_place = copy.deepcopy(posiable_place)
		for first, second in direction:
			if x + first >= 0 and x + first <= pp.width - 1 and y + second >= 0 and y + second <= pp.height - 1:
				if board[x + first][y + second] == 0:
					new_posiable_place.append((x+first,y+second))
		new_posiable_place = list(set(new_posiable_place))
		# 将（x，y） 从可下的棋子列表中删去
		new_posiable_place.remove((x,y))
		_,re_v = alpha_min(new_posiable_place,alpha,beta,piles,3 - judge,set_piles)
		del new_posiable_place
		board[x][y] = 0
		#v = max(v,re_v)
		if re_v > v:
			v = re_v;v_x = x;v_y = y
		if v >= beta:
			return ((v_x,v_y),v)
		alpha = max(alpha,v)
	del posiable_place_copy
	return ((v_x,v_y),v)

def alpha_min(posiable_place,alpha,beta,piles,judge,set_piles):
	if piles >= set_piles:
		values = {}
		for x, y in posiable_place:
			each_value = judge_value(x, y, 2)
			values[(x, y)] = each_value
		return (max(values, key=values.get), values[max(values, key=values.get)])
	piles += 1
	v = float('inf')
	v_x = v_y = 0
	for x, y in posiable_place:
		board[x][y] = judge
		new_posiable_place = copy.deepcopy(posiable_place)
		for first, second in direction:
			if x + first >= 0 and x + first <= pp.width - 1 and y + second >= 0 and y + second <= pp.height - 1:
				if board[x + first][y + second] == 0:
					new_posiable_place.append((x + first, y + second))
		new_posiable_place = list(set(new_posiable_place))
		new_posiable_place.remove((x,y))
		_, re_v = alpha_max(new_posiable_place, alpha, beta, piles,3 - judge,set_piles)
		del new_posiable_place
		board[x][y] = 0
		# v = min(v,re_v)
		if re_v < v:
			v = re_v
			v_x = x
			v_y = y
		if v <= alpha:
			return ((v_x, v_y), v)
		beta = min(beta,v)
	return ((v_x, v_y), v)

###################################################################################


def brain_turn():
	if pp.terminateAI:
		return
	i = 0
	while True:
		x,y = get_best_value()
		i += 1
		if pp.terminateAI:
			return
		if isFree(x, y):
			break
	if i > 1:
		pp.pipeOut("DEBUG {} coordinates didn't hit an empty field".format(i))
	pp.do_mymove(x, y)




######################################################################
# A possible way how to debug brains.
# To test it, just "uncomment" it (delete enclosing """)
######################################################################
"""
# define a file for logging ...
DEBUG_LOGFILE = "/tmp/pbrain-pyrandom.log"
# ...and clear it initially
with open(DEBUG_LOGFILE,"w") as f:
	pass

# define a function for writing messages to the file
def logDebug(msg):
	with open(DEBUG_LOGFILE,"a") as f:
		f.write(msg+"\n")
		f.flush()

# define a function to get exception traceback
def logTraceBack():
	import traceback
	with open(DEBUG_LOGFILE,"a") as f:
		traceback.print_exc(file=f)
		f.flush()
	raise

# use logDebug wherever
# use try-except (with logTraceBack in except branch) to get exception info
# an example of problematic function
def brain_turn():
	logDebug("some message 1")
	try:
		logDebug("some message 2")
		1. / 0. # some code raising an exception
		logDebug("some message 3") # not logged, as it is after error
	except:
		logTraceBack()
"""
######################################################################


# "overwrites" functions in pisqpipe module
pp.brain_init = brain_init
pp.brain_restart = brain_restart
pp.brain_my = brain_my
pp.brain_opponents = brain_opponents
pp.brain_block = brain_block
pp.brain_takeback = brain_takeback
pp.brain_turn = brain_turn
pp.brain_end = brain_end
pp.brain_about = brain_about

if DEBUG_EVAL:
	pp.brain_eval = brain_eval

def main():
	pp.main()



if __name__ == "__main__":
	main()
